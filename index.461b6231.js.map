{"mappings":"A,S,E,C,C,C,E,C,A,M,G,E,E,M,A,G,C,E,E,M,A,E,I,I,E,E,E,A,M,G,E,E,I,C,C,E,C,C,C,E,C,O,C,C,S,E,C,E,O,A,S,C,E,G,M,O,C,G,O,E,E,E,I,A,S,C,E,G,A,a,O,Q,A,M,C,C,O,Q,C,E,A,M,C,C,a,C,O,M,I,C,E,E,I,A,S,C,C,C,E,G,G,G,A,U,O,E,O,E,E,K,G,I,E,O,S,C,Q,C,I,C,G,K,C,E,I,G,W,G,E,W,E,C,E,E,W,C,I,A,E,A,Q,G,A,Q,E,O,M,I,C,G,G,A,c,G,2C,I,C,G,O,E,E,K,G,E,I,A,W,M,A,U,wI,G,CCOA,IAII,EAJE,EAAQ,SAAS,aAAa,CAAC,SAC/B,EAAQ,SAAS,aAAa,CAAC,SAEjC,EAAM,EADG,EAAM,gBAAgB,CAAC,OAGhC,EAAS,CAAA,EAEb,EAAM,gBAAgB,CAAC,QAAS,SAAC,CAAjC,EACE,IAAM,EAAU,EAAG,EAAM,iBAAiB,CAAC,QAAQ,EAAE,SAAS,CAC5D,SAAC,CADH,EACY,OAAA,EAAK,WAAW,GAAK,EAAE,MAAM,CAAC,WAAW,A,GAG/C,EAAS,EAAI,GAAI,IAAI,CAAC,SAAC,CAAA,CAAM,CAAnC,QACE,AAAI,AAAuC,QAAvC,EAAE,MAAM,CAAC,WAAW,CAAC,WAAW,GAEhC,CAAC,EAAK,QAAQ,CAAC,EAAO,CAAC,WAAW,CAAG,CAAC,EAAK,QAAQ,CAAC,EAAO,CAAC,WAAW,CAIvE,AAAuC,WAAvC,EAAE,MAAM,CAAC,WAAW,CAAC,WAAW,GAQ3B,CAPG,EAAK,QAAQ,CAAC,EAAO,CAAC,WAAW,CACxC,OAAO,CAAC,IAAK,IACb,OAAO,CAAC,IAAK,IAKJ,CAJF,EAAK,QAAQ,CAAC,EAAO,CAAC,WAAW,CACxC,OAAO,CAAC,IAAK,IACb,OAAO,CAAC,IAAK,IAKX,EAAK,QAAQ,CAAC,EAAO,CAAC,WAAW,CAAC,aAAa,CACpD,EAAK,QAAQ,CAAC,EAAO,CAAC,WAAW,CAErC,EAEI,CAAA,IAAgB,EAAE,MAAM,CAAC,WAAW,EAAK,EAI3C,EAAS,CAAA,GAHT,EAAO,OAAO,GACd,EAAS,CAAA,GAKX,EAAO,OAAO,CAAC,S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","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nfunction _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\nfunction _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nfunction _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nfunction _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\n// ##### Implement table sorting by clicking on the title (in two directions)\n// - When users clicks on one of the table headers, table should be sorted\n// in ASC order, the second click sorts it in DESC order.\n// - When users click on a new title, always sort in ASC order.\nvar tbody = document.querySelector(\"tbody\");\nvar thead = document.querySelector(\"thead\");\nvar rows = tbody.querySelectorAll(\"tr\");\nvar tr = _to_consumable_array(rows);\nvar lastClicked;\nvar isDESC = false;\nthead.addEventListener(\"click\", function(e) {\n    var colNum = _to_consumable_array(thead.firstElementChild.children).findIndex(function(cell) {\n        return cell.textContent === e.target.textContent;\n    });\n    var sorted = _to_consumable_array(tr).sort(function(row1, row2) {\n        if (e.target.textContent.toLowerCase() === \"age\") return +row1.children[colNum].textContent - +row2.children[colNum].textContent;\n        if (e.target.textContent.toLowerCase() === \"salary\") {\n            var a = row1.children[colNum].textContent.replace(\"$\", \"\").replace(\",\", \"\");\n            var b = row2.children[colNum].textContent.replace(\"$\", \"\").replace(\",\", \"\");\n            return +a - +b;\n        }\n        return row1.children[colNum].textContent.localeCompare(row2.children[colNum].textContent);\n    });\n    if (lastClicked === e.target.textContent && !isDESC) {\n        sorted.reverse();\n        isDESC = true;\n    } else isDESC = false;\n    sorted.forEach(function(row) {\n        tbody.append(row);\n    });\n    lastClicked = e.target.textContent;\n});\n// ##### When user clicks on a row, it should become selected.\n// - Use 'active' class for table row to indicate it is selected.\n// - Only one line can be selected at a time.\ntbody.addEventListener(\"click\", function(e) {\n    var target = e.target;\n    var hasActive = tbody.querySelector(\".active\");\n    if (hasActive) hasActive.classList.remove(\"active\");\n    target.closest(\"tr\").classList.add(\"active\");\n});\n// ##### Write a script to add a form to the document.\n// Form allows users to add new employees to the spreadsheet.\n// - The form should have class `new-employee-form` (to apply correct styles).\n// - The form should have 4 inputs, 1 select and submit button.\n// - Put inputs inside labels:\n//   ```html\n// <label>Name: <input name=\"name\" type=\"text\"></label>\n// ```\n//   - Add qa attributes for each input field:\n//   ```\n//  data-qa=\"name\"\n//  data-qa=\"position\"\n//  data-qa=\"office\"\n//  data-qa=\"age\"\n//  data-qa=\"salary\"\n// ```\n//   - Select should have 6 options:\n//   `Tokyo`, `Singapore`, `London`, `New York`, `Edinburgh`, `San Francisco`.\n// - Use texts for labels and buttons from the screenshot below.\n// - Age and salary inputs should have a number type. Don't forget to\n// convert the string from salary input to correct value like in the table.\n// - Click on `Save to table` should add a new employee to the table.\n// - All fields are required.\n// Create form html\nvar html = '<form method=\"get\" action=\"#\" class=\"new-employee-form\" onsubmit=\"jsFunction();return false\">\\n<label>Name: <input type=\"text\" name=\"name\" data-qa=\"name\" required></label>\\n<label>Position: <input type=\"text\" name=\"position\" data-qa=\"position\" required></label>\\n<label>Office: <select name=\"office\" data-qa=\"office\" required>\\n  <option value=\"tokyo\">Tokyo</option>\\n  <option value=\"singapore\">Singapore</option>\\n  <option value=\"london\">London</option>\\n  <option value=\"new york\">New York</option>\\n  <option value=\"edinburgh\">Edinburgh</option>\\n  <option value=\"san francisco\">San Francisco</option>\\n</select></label>\\n<label>Age: <input type=\"number\" name=\"age\" data-qa=\"age\" required></label>\\n<label>Salary: <input type=\"number\" name=\"salary\" data-qa=\"salary\" required></label>\\n<button type=\"submit\">Save to table</button>\\n</form>';\n// Add form to HTML\ndocument.body.insertAdjacentHTML(\"beforeend\", html);\n// Form btn event\nvar btn = document.querySelector(\"button\");\nbtn.addEventListener(\"click\", function(e) {\n    // prevent btn from reloading the page after submit\n    e.preventDefault();\n    // getting and formatting values and for adding to the table\n    var fullName = document.querySelector('[name = \"name\"]').value;\n    var position = document.querySelector('[name = \"position\"]').value;\n    var office = document.querySelector('[name = \"office\"]').value.split(\"\");\n    var age = document.querySelector('[name = \"age\"]').value;\n    var salary = (+document.querySelector('[name = \"salary\"]').value).toLocaleString(\"en-US\");\n    if (office.includes(\" \")) office = office[0].toUpperCase() + office.slice(1, office.indexOf(\" \")).join(\"\") + \" \" + office.slice(office.indexOf(\" \"))[1].toUpperCase() + office.slice(office.indexOf(\" \") + 2).join(\"\");\n    else office = office[0].toUpperCase() + office.slice(1).join(\"\");\n    // adding error message in case the name is too short\n    if (fullName.length < 4) {\n        pushNotification(\"Invalid name\", \"The name is too short.\\n \\nPlease enter a valid name.\", \"error\");\n        return;\n    }\n    if (!position) {\n        pushNotification(\"Invalid position\", \"Please fill position field\", \"error\");\n        return;\n    }\n    // adding error message in case the age <18 and >90\n    if (+age < 18 || +age > 90) {\n        pushNotification(\"Invalid age\", \"The age is inappropriate.\\n \\nAge should be more than 18 and not more than 90\", \"error\");\n        return;\n    }\n    if (+salary <= 0) {\n        pushNotification(\"Invalid salary\", \"The salary should be more than 0\\n\", \"error\");\n        return;\n    }\n    var newRow = \"<tr><td>\".concat(fullName, \"</td>\\n<td>\").concat(position, \"</td>\\n<td>\").concat(office, \"</td>\\n<td>\").concat(age, \"</td>\\n<td>$\").concat(salary, \"</td>\\n</tr>\");\n    tbody.insertAdjacentHTML(\"beforeend\", newRow);\n    tr = _to_consumable_array(tr).concat([\n        tbody.lastElementChild\n    ]);\n    // adding success message\n    pushNotification(\"Success\", \"The employee is successfully added\", \"success\");\n    // reset form values\n    document.querySelector('[name = \"name\"]').value = \"\";\n    document.querySelector('[name = \"position\"]').value = \"\";\n    document.querySelector('[name = \"office\"]').value = \"tokyo\";\n    document.querySelector('[name = \"age\"]').value = \"\";\n    document.querySelector('[name = \"salary\"]').value = \"\";\n});\n// Notification function\nvar pushNotification = function(title, description, type) {\n    var message = document.createElement(\"div\");\n    var h2 = document.createElement(\"h2\");\n    var p = document.createElement(\"p\");\n    message.classList.add(\"notification\", \"\".concat(type));\n    message.dataset.qa = \"notification\";\n    h2.classList.add(\"title\");\n    h2.textContent = title;\n    p.innerText = description;\n    message.append(h2, p);\n    document.body.append(message);\n    setTimeout(function() {\n        return message.style.visibility = \"hidden\";\n    }, 2000);\n    setTimeout(function() {\n        return message.remove();\n    }, 5000);\n};\n// ##### Implement editing of table cells by double-clicking on it (optional).\n// - Double click on the cell of the table, should remove text, and append input\n//   with `cell-input` class.\n// - The input value should contain replaced by input text.\n// - Only one cell can be edited at the time.\n// - On blur save changes to table cell. Remove input and set new text.\n// - On 'Enter' keypress, save changes to the table cell.\n//   Remove input and set new text in the table cell.\n// - If an input is empty on submitting return initial value.\ntbody.addEventListener(\"dblclick\", function(e) {\n    var target = e.target;\n    var inputExist = tbody.querySelector(\".cell-input\");\n    var input = document.createElement(\"input\");\n    input.classList.add(\"cell-input\");\n    if (target.tagName.toLowerCase() === \"td\") {\n        var td = target;\n        var initialText = td.textContent;\n        if (inputExist) return;\n        td.textContent += \" replaced by:\";\n        td.append(input);\n        var updateCell = function(ev) {\n            if (ev.key === \"Enter\" || ev.type === \"blur\") {\n                if (!input.value) td.textContent = initialText;\n                else td.textContent = input.value;\n                input.remove();\n            }\n        };\n        input.addEventListener(\"blur\", updateCell);\n        input.addEventListener(\"keypress\", updateCell);\n    }\n});\n\n//# sourceMappingURL=index.461b6231.js.map\n","'use strict';\n\n// ##### Implement table sorting by clicking on the title (in two directions)\n// - When users clicks on one of the table headers, table should be sorted\n// in ASC order, the second click sorts it in DESC order.\n// - When users click on a new title, always sort in ASC order.\n\nconst tbody = document.querySelector('tbody');\nconst thead = document.querySelector('thead');\nconst rows = tbody.querySelectorAll('tr');\nlet tr = [...rows];\nlet lastClicked;\nlet isDESC = false;\n\nthead.addEventListener('click', (e) => {\n  const colNum = [...thead.firstElementChild.children].findIndex(\n    (cell) => cell.textContent === e.target.textContent,\n  );\n\n  const sorted = [...tr].sort((row1, row2) => {\n    if (e.target.textContent.toLowerCase() === 'age') {\n      return (\n        +row1.children[colNum].textContent - +row2.children[colNum].textContent\n      );\n    }\n\n    if (e.target.textContent.toLowerCase() === 'salary') {\n      const a = row1.children[colNum].textContent\n        .replace('$', '')\n        .replace(',', '');\n      const b = row2.children[colNum].textContent\n        .replace('$', '')\n        .replace(',', '');\n\n      return +a - +b;\n    }\n\n    return row1.children[colNum].textContent.localeCompare(\n      row2.children[colNum].textContent,\n    );\n  });\n\n  if (lastClicked === e.target.textContent && !isDESC) {\n    sorted.reverse();\n    isDESC = true;\n  } else {\n    isDESC = false;\n  }\n\n  sorted.forEach((row) => {\n    tbody.append(row);\n  });\n\n  lastClicked = e.target.textContent;\n});\n\n// ##### When user clicks on a row, it should become selected.\n// - Use 'active' class for table row to indicate it is selected.\n// - Only one line can be selected at a time.\n\ntbody.addEventListener('click', (e) => {\n  const { target } = e;\n  const hasActive = tbody.querySelector('.active');\n\n  if (hasActive) {\n    hasActive.classList.remove('active');\n  }\n  target.closest('tr').classList.add('active');\n});\n\n// ##### Write a script to add a form to the document.\n// Form allows users to add new employees to the spreadsheet.\n// - The form should have class `new-employee-form` (to apply correct styles).\n// - The form should have 4 inputs, 1 select and submit button.\n// - Put inputs inside labels:\n//   ```html\n// <label>Name: <input name=\"name\" type=\"text\"></label>\n// ```\n//   - Add qa attributes for each input field:\n//   ```\n//  data-qa=\"name\"\n//  data-qa=\"position\"\n//  data-qa=\"office\"\n//  data-qa=\"age\"\n//  data-qa=\"salary\"\n// ```\n//   - Select should have 6 options:\n//   `Tokyo`, `Singapore`, `London`, `New York`, `Edinburgh`, `San Francisco`.\n// - Use texts for labels and buttons from the screenshot below.\n// - Age and salary inputs should have a number type. Don't forget to\n// convert the string from salary input to correct value like in the table.\n// - Click on `Save to table` should add a new employee to the table.\n// - All fields are required.\n\n// Create form html\nconst html = `<form method=\"get\" action=\"#\" class=\"new-employee-form\" onsubmit=\"jsFunction();return false\">\n<label>Name: <input type=\"text\" name=\"name\" data-qa=\"name\" required></label>\n<label>Position: <input type=\"text\" name=\"position\" data-qa=\"position\" required></label>\n<label>Office: <select name=\"office\" data-qa=\"office\" required>\n  <option value=\"tokyo\">Tokyo</option>\n  <option value=\"singapore\">Singapore</option>\n  <option value=\"london\">London</option>\n  <option value=\"new york\">New York</option>\n  <option value=\"edinburgh\">Edinburgh</option>\n  <option value=\"san francisco\">San Francisco</option>\n</select></label>\n<label>Age: <input type=\"number\" name=\"age\" data-qa=\"age\" required></label>\n<label>Salary: <input type=\"number\" name=\"salary\" data-qa=\"salary\" required></label>\n<button type=\"submit\">Save to table</button>\n</form>`;\n\n// Add form to HTML\ndocument.body.insertAdjacentHTML('beforeend', html);\n\n// Form btn event\nconst btn = document.querySelector('button');\n\nbtn.addEventListener('click', (e) => {\n  // prevent btn from reloading the page after submit\n  e.preventDefault();\n\n  // getting and formatting values and for adding to the table\n  const fullName = document.querySelector('[name = \"name\"]').value;\n  const position = document.querySelector('[name = \"position\"]').value;\n  let office = document.querySelector('[name = \"office\"]').value.split('');\n  const age = document.querySelector('[name = \"age\"]').value;\n  const salary = (+document.querySelector('[name = \"salary\"]')\n    .value).toLocaleString('en-US');\n\n  if (office.includes(' ')) {\n    office =\n      office[0].toUpperCase() +\n      office.slice(1, office.indexOf(' ')).join('') +\n      ' ' +\n      office.slice(office.indexOf(' '))[1].toUpperCase() +\n      office.slice(office.indexOf(' ') + 2).join('');\n  } else {\n    office = office[0].toUpperCase() + office.slice(1).join('');\n  }\n\n  // adding error message in case the name is too short\n  if (fullName.length < 4) {\n    pushNotification(\n      'Invalid name',\n      'The name is too short.\\n ' + '\\nPlease enter a valid name.',\n      'error',\n    );\n\n    return;\n  }\n\n  if (!position) {\n    pushNotification('Invalid position', 'Please fill position field', 'error');\n\n    return;\n  }\n\n  // adding error message in case the age <18 and >90\n  if (+age < 18 || +age > 90) {\n    pushNotification(\n      'Invalid age',\n      'The age is inappropriate.\\n ' +\n        '\\nAge should be more than 18 and not more than 90',\n      'error',\n    );\n\n    return;\n  }\n\n  if (+salary <= 0) {\n    pushNotification(\n      'Invalid salary',\n      'The salary should be more than 0\\n',\n      'error',\n    );\n\n    return;\n  }\n\n  const newRow = `<tr><td>${fullName}</td>\n<td>${position}</td>\n<td>${office}</td>\n<td>${age}</td>\n<td>$${salary}</td>\n</tr>`;\n\n  tbody.insertAdjacentHTML('beforeend', newRow);\n  tr = [...tr, tbody.lastElementChild];\n\n  // adding success message\n  pushNotification('Success', 'The employee is successfully added', 'success');\n\n  // reset form values\n  document.querySelector('[name = \"name\"]').value = '';\n  document.querySelector('[name = \"position\"]').value = '';\n  document.querySelector('[name = \"office\"]').value = 'tokyo';\n  document.querySelector('[name = \"age\"]').value = '';\n  document.querySelector('[name = \"salary\"]').value = '';\n});\n\n// Notification function\nconst pushNotification = (title, description, type) => {\n  const message = document.createElement('div');\n  const h2 = document.createElement('h2');\n  const p = document.createElement('p');\n\n  message.classList.add('notification', `${type}`);\n  message.dataset.qa = 'notification';\n  h2.classList.add('title');\n\n  h2.textContent = title;\n  p.innerText = description;\n\n  message.append(h2, p);\n\n  document.body.append(message);\n  setTimeout(() => (message.style.visibility = 'hidden'), 2000);\n  setTimeout(() => message.remove(), 5000);\n};\n\n// ##### Implement editing of table cells by double-clicking on it (optional).\n// - Double click on the cell of the table, should remove text, and append input\n//   with `cell-input` class.\n// - The input value should contain replaced by input text.\n// - Only one cell can be edited at the time.\n// - On blur save changes to table cell. Remove input and set new text.\n// - On 'Enter' keypress, save changes to the table cell.\n//   Remove input and set new text in the table cell.\n// - If an input is empty on submitting return initial value.\n\ntbody.addEventListener('dblclick', (e) => {\n  const { target } = e;\n  const inputExist = tbody.querySelector('.cell-input');\n\n  const input = document.createElement('input');\n\n  input.classList.add('cell-input');\n\n  if (target.tagName.toLowerCase() === 'td') {\n    const td = target;\n    const initialText = td.textContent;\n\n    if (inputExist) {\n      return;\n    }\n\n    td.textContent += ' replaced by:';\n    td.append(input);\n\n    const updateCell = (ev) => {\n      if (ev.key === 'Enter' || ev.type === 'blur') {\n        if (!input.value) {\n          td.textContent = initialText;\n        } else {\n          td.textContent = input.value;\n        }\n        input.remove();\n      }\n    };\n\n    input.addEventListener('blur', updateCell);\n    input.addEventListener('keypress', updateCell);\n  }\n});\n"],"names":["_array_like_to_array","arr","len","length","i","arr2","Array","_to_consumable_array","_array_without_holes","isArray","_iterable_to_array","iter","Symbol","iterator","from","_unsupported_iterable_to_array","o","minLen","n","Object","prototype","toString","call","slice","constructor","name","test","_non_iterable_spread","TypeError","lastClicked","tbody","document","querySelector","thead","tr","querySelectorAll","isDESC","addEventListener","e","colNum","firstElementChild","children","findIndex","cell","textContent","target","sorted","sort","row1","row2","toLowerCase","replace","localeCompare","reverse","forEach","row","append","hasActive","classList","remove","closest","add","body","insertAdjacentHTML","btn","preventDefault","fullName","value","position","office","split","age","salary","toLocaleString","includes","toUpperCase","indexOf","join","pushNotification","newRow","concat","lastElementChild","title","description","type","message","createElement","h2","p","dataset","qa","innerText","setTimeout","style","visibility","inputExist","input","tagName","initialText","td","updateCell","ev","key"],"version":3,"file":"index.461b6231.js.map"}